import torch

from trainable_frft.fracf_torch import fracF

X = torch.tensor(
    [
        [0, 0, 0, 0],
        [1, 2, 3, 4],
        [5, 6, 7, 8],
        [9, 10, 11, 12],
        [13, 14, 15, 16],
        [17, 18, 19, 20],
    ]
)


def test_fracfn() -> None:
    global X
    a = torch.tensor(0.75)
    expected_dim0 = torch.tensor(
        [
            [
                -1.639937532870064 - 1j * 1.260544830999431,
                -2.053600005144979 - 1j * 1.047276319302379,
                -2.467262477419891 - 1j * 0.834007807605332,
                -2.880924949694803 - 1j * 0.620739295908285,
            ],
            [
                2.692285882089642 - 1j * 1.831901311430273,
                2.563548771595040 - 1j * 2.193833902635730,
                2.434811661100438 - 1j * 2.555766493841186,
                2.306074550605834 - 1j * 2.917699085046646,
            ],
            [
                -0.279554616944487 + 1j * 3.275718988216769,
                0.191658793730746 + 1j * 2.955390997071200,
                0.662872204405978 + 1j * 2.635063005925632,
                1.134085615081208 + 1j * 2.314735014780063,
            ],
            [
                17.154400630655218 + 1j * 4.172078412430205,
                19.060445145172462 + 1j * 4.635642680478006,
                20.966489659689707 + 1j * 5.099206948525807,
                22.872534174206958 + 1j * 5.562771216573609,
            ],
            [
                8.761396009098664 - 1j * 9.041622828837008,
                9.232609419773897 - 1j * 9.361950819982576,
                9.703822830449129 - 1j * 9.682278811128146,
                10.175036241124364 - 1j * 10.002606802273716,
            ],
            [
                -5.009553870992480 - 1j * 4.682885330267955,
                -5.138290981487083 - 1j * 5.044817921473413,
                -5.267028091981683 - 1j * 5.406750512678871,
                -5.395765202476286 - 1j * 5.768683103884329,
            ],
        ]
    )
    expected_dim1 = torch.tensor(
        [
            [0.0 + 1j * 0.0, 0.0 + 1j * 0.0, 0.0 + 1j * 0.0, 0.0 + 1j * 0.0],
            [
                0.012969158656193 - 1j * 0.401447437522288,
                0.624145873079738 + 1j * 0.282305389191933,
                4.889045010474662 + 1j * 0.565406277873251,
                1.635121448621091 - 1j * 1.471191310147956,
            ],
            [
                -0.881766803308353 + 1j * 0.473105941060268,
                1.227022272584351 - 1j * 1.683852318466376,
                12.296603344534061 + 1j * 2.382750970285592,
                2.765343152312703 - 1j * 3.511950202280931,
            ],
            [
                -1.776502765272898 + 1j * 1.347659319642825,
                1.829898672088962 - 1j * 3.650010026124682,
                19.704161678593458 + 1j * 4.200095662697935,
                3.895564856004320 - 1j * 5.552709094413909,
            ],
            [
                -2.671238727237449 + 1j * 2.222212698225386,
                2.432775071593575 - 1j * 5.616167733782992,
                27.111720012652853 + 1j * 6.017440355110280,
                5.025786559695932 - 1j * 7.593467986546881,
            ],
            [
                -3.565974689201997 + 1j * 3.096766076807937,
                3.035651471098188 - 1j * 7.582325441441302,
                34.519278346712255 + 1j * 7.834785047522617,
                6.156008263387545 - 1j * 9.634226878679856,
            ],
        ]
    )

    tol = 1e-4
    # assert torch.allclose(fracF(X, a, dim=0), expected_dim0, atol=tol)
    assert torch.allclose(fracF(X, a, dim=1), expected_dim1, atol=tol)
    assert torch.allclose(fracF(X, a), expected_dim1, atol=tol)
